/*
          # [Initial Schema Setup]
          This migration sets up the complete initial database schema for the "Wasl" chat application. It includes tables for user profiles, conversations, members, and messages, along with necessary security policies and a function to automatically create user profiles upon sign-up.

          ## Query Description: This operation is structural and foundational. It creates the necessary tables and relationships for the app to function. It does not affect any existing data as it's intended for a fresh setup. It is safe to run on a new Supabase project.

          ## Metadata:
          - Schema-Category: "Structural"
          - Impact-Level: "High"
          - Requires-Backup: false
          - Reversible: true (by dropping tables)

          ## Structure Details:
          - Tables Created: profiles, conversations, conversation_members, messages
          - Functions Created: create_public_profile_for_user
          - Triggers Created: on_auth_user_created
          - RLS Policies: Added for all tables to ensure users can only access their own data.

          ## Security Implications:
          - RLS Status: Enabled on all tables.
          - Policy Changes: Yes, new policies are created.
          - Auth Requirements: Policies are based on the authenticated user's ID (auth.uid()).

          ## Performance Impact:
          - Indexes: Primary keys and foreign keys are indexed by default.
          - Triggers: One trigger is added to the auth.users table.
          - Estimated Impact: Low performance impact, standard for a chat application setup.
          */

-- 1. Profiles Table
-- Stores public user information.
CREATE TABLE
  profiles (
    id UUID REFERENCES auth.users (id) ON DELETE CASCADE NOT NULL PRIMARY KEY,
    username TEXT UNIQUE NOT NULL,
    full_name TEXT,
    avatar_url TEXT,
    status TEXT DEFAULT 'مرحباً! أنا أستخدم تطبيق وصل.',
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT username_length CHECK (char_length(username) >= 3)
  );

COMMENT ON TABLE profiles IS 'Public profile information for each user.';

-- 2. Conversations Table
-- Stores information about a chat conversation.
CREATE TABLE
  conversations (
    id UUID DEFAULT gen_random_uuid () PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    -- For group chats
    group_name TEXT,
    group_avatar_url TEXT,
    created_by UUID REFERENCES auth.users (id) ON DELETE SET NULL
  );

COMMENT ON TABLE conversations IS 'Represents a chat thread, either private or group.';

-- 3. Conversation Members Table
-- Junction table to link users to conversations.
CREATE TABLE
  conversation_members (
    conversation_id UUID REFERENCES conversations (id) ON DELETE CASCADE NOT NULL,
    user_id UUID REFERENCES auth.users (id) ON DELETE CASCADE NOT NULL,
    joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    PRIMARY KEY (conversation_id, user_id)
  );

COMMENT ON TABLE conversation_members IS 'Links users to the conversations they are part of.';

-- 4. Messages Table
-- Stores all messages for all conversations.
CREATE TABLE
  messages (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    conversation_id UUID REFERENCES conversations (id) ON DELETE CASCADE NOT NULL,
    user_id UUID REFERENCES auth.users (id) ON DELETE SET NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
  );

COMMENT ON TABLE messages IS 'Stores individual chat messages.';

-- 5. Function to create a profile for a new user
CREATE OR REPLACE FUNCTION public.create_public_profile_for_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER -- Important for accessing auth.users
AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name, username, avatar_url)
  VALUES (
    NEW.id,
    NEW.raw_user_meta_data->>'full_name',
    NEW.raw_user_meta_data->>'username',
    NEW.raw_user_meta_data->>'avatar_url'
  );
  RETURN NEW;
END;
$$;

-- 6. Trigger to call the function when a new user signs up
CREATE TRIGGER on_auth_user_created
AFTER INSERT ON auth.users
FOR EACH ROW
EXECUTE FUNCTION public.create_public_profile_for_user();

-- 7. RLS Policies
-- Profiles
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view all profiles." ON profiles
  FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Users can insert their own profile." ON profiles
  FOR INSERT WITH CHECK (auth.uid() = id);

CREATE POLICY "Users can update their own profile." ON profiles
  FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);

-- Conversations
ALTER TABLE conversations ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view conversations they are a member of." ON conversations
  FOR SELECT USING (
    EXISTS (
      SELECT 1
      FROM conversation_members
      WHERE
        conversation_members.conversation_id = conversations.id AND
        conversation_members.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can create conversations." ON conversations
  FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- Conversation Members
ALTER TABLE conversation_members ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view members of conversations they are in." ON conversation_members
  FOR SELECT USING (
    EXISTS (
      SELECT 1
      FROM conversation_members cm
      WHERE
        cm.conversation_id = conversation_members.conversation_id AND
        cm.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can insert members into conversations they are in." ON conversation_members
  FOR INSERT WITH CHECK (
    EXISTS (
      SELECT 1
      FROM conversation_members cm
      WHERE
        cm.conversation_id = conversation_members.conversation_id AND
        cm.user_id = auth.uid()
    )
  );

-- Messages
ALTER TABLE messages ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view messages in conversations they are a member of." ON messages
  FOR SELECT USING (
    EXISTS (
      SELECT 1
      FROM conversation_members
      WHERE
        conversation_members.conversation_id = messages.conversation_id AND
        conversation_members.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can insert messages in conversations they are a member of." ON messages
  FOR INSERT WITH CHECK (
    EXISTS (
      SELECT 1
      FROM conversation_members
      WHERE
        conversation_members.conversation_id = messages.conversation_id AND
        conversation_members.user_id = auth.uid()
    )
  );
